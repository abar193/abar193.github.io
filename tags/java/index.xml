<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Mr. Abar</title>
    <link>https://mrabar.me/tags/java/</link>
    <description>Recent content in java on Mr. Abar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Dec 2021 10:11:10 +0200</lastBuildDate><atom:link href="https://mrabar.me/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Devternity 2021</title>
      <link>https://mrabar.me/posts/devternity2021/</link>
      <pubDate>Fri, 10 Dec 2021 10:11:10 +0200</pubDate>
      
      <guid>https://mrabar.me/posts/devternity2021/</guid>
      <description>Intro Before going to DevTernity 2021 I had no expectations of what might be in there. It was just another conference that was forwarded to me by my manager, and I was just bored enough to decide to sign up for it. I haven&amp;rsquo;t checked the backgrounds of the presenters and wasn&amp;rsquo;t even aware that Uncle Bob himself will give a talk there.
During the conference, I was amazed by the technical level of presenters and the potential usefulness of the reports.</description>
    </item>
    
    <item>
      <title>Legacy migration: custom request handling in Spring Web</title>
      <link>https://mrabar.me/posts/legacy_handling/</link>
      <pubDate>Sun, 31 Oct 2021 21:10:13 +0200</pubDate>
      
      <guid>https://mrabar.me/posts/legacy_handling/</guid>
      <description>Intro If one day you woke up with the feeling, that the standard Spring Web handlers are lacking functionality and you want to extend it yourself, then look no further. This article is for you, and I hope it will be helpful.
Example Consider the scenario: you have an old legacy project full of heavy domain logic and questionable technical solutions. Logic is grouped by so called modules, each module may have one or several action.</description>
    </item>
    
    <item>
      <title>IT_ONE: Java and Big Data Meet Up</title>
      <link>https://mrabar.me/posts/it_one_2021/</link>
      <pubDate>Sat, 04 Sep 2021 09:30:25 +0300</pubDate>
      
      <guid>https://mrabar.me/posts/it_one_2021/</guid>
      <description>My synopsis + English translation for IT_One Meet Up - a free online meetup for Java and Big Data.
Overview of big data storage tech. Pros-, Cons-, how to use. By Maksim Stacenko
Topics:
 Describing technologies, highlighting how to save date engineer time by choosing not the most popular solutions Share experience from PoC works on big data Saving on hardware
 Your data storage is a product: do you store test data only, do you use it in production, does it working 24/7 (especially with the new remote work approach), do you remember the legal consequences of neglecting data safety and consistency?</description>
    </item>
    
    <item>
      <title>Joker 2020. Days 3 &amp; 4.</title>
      <link>https://mrabar.me/posts/joker-2020-2/</link>
      <pubDate>Sun, 06 Dec 2020 16:41:04 +0200</pubDate>
      
      <guid>https://mrabar.me/posts/joker-2020-2/</guid>
      <description>Hidden pearls for high-performance-persistence in Java Presented by Sven Ruppert - DevSecOps from JFrog.
Presentation was pre-recorder, but the questions were live.
Why and what: Inside of JVM, for different areas - from embedded, to terabyte-big document storage systems, but scaling and tuning ways of storing data.
You can&amp;rsquo;t get rid of the persistence layer, but there are three solutions as the beginning of making optimization.
JOOQ: a tool for mapping SQL to Java DSL - SQL style, generated from the DB schema.</description>
    </item>
    
    <item>
      <title>Joker 2020. Days 1 &amp; 2.</title>
      <link>https://mrabar.me/posts/joker-2020-1/</link>
      <pubDate>Sun, 29 Nov 2020 16:41:04 +0200</pubDate>
      
      <guid>https://mrabar.me/posts/joker-2020-1/</guid>
      <description>Spring: Your next Java microframework Presented by Alexey Nesterov. First time presented in the Russian language.
Using Spring as micro-framework. Microframework: often is specifically designed for building the APIs for another service or application. In microframeworks, people typically seek ease of development, speed, simplicity, cloud-readiness (cloud-native).
Spring easy.
(&amp;hellip;to develop)
Autoconfigs, profiles, etc. No Livereload? There is livereload for Spring! Spring Boot Dev Tools: livereload, works even remotely + tons of other features.</description>
    </item>
    
    <item>
      <title>Running manual Cucumber tests in Java</title>
      <link>https://mrabar.me/posts/manual-cucumber/</link>
      <pubDate>Fri, 06 Jul 2018 10:00:00 +0300</pubDate>
      
      <guid>https://mrabar.me/posts/manual-cucumber/</guid>
      <description>In theory, it would be nice to have everything automated. In reality, it might be the case that for some reasons you have to run and manually verify test results.
There can be a number of ways for running manual Cucumber tests, for Ruby there&amp;rsquo;s even whole CukeHub to run and organize manual tests, but my research yielded no results on how to do manual testing in Java.
So, let&amp;rsquo;s implement it our self.</description>
    </item>
    
  </channel>
</rss>
